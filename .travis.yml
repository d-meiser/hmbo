language: haskell

env:
  - GHCVER=7.6.3 SUBMIT_COVERAGE=FALSE
  - GHCVER=7.8.4 SUBMIT_COVERAGE=TRUE

before_install:
  - |
    if [ "$GHCVER" = `ghc --numeric-version` ]; then
      echo "use system ghc: `which ghc` `ghc --numeric-version`"
    else 
      travis_retry sudo add-apt-repository -y ppa:hvr/ghc
      travis_retry sudo apt-get update
      travis_retry sudo apt-get install -y --force-yes cabal-install-1.18 ghc-$GHCVER
      export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/1.18/bin:$PATH
      echo "use ppa:hvr/ghc: `which ghc` `ghc --numeric-version`"
    fi
  - cabal install Cabal --constraint="Cabal >= 1.18 && < 1.19"
  # Uncomment whenever hackage is down.
  # - mkdir -p ~/.cabal && cp travis/config ~/.cabal/config && cabal update

install:
  - export PATH=$HOME/.cabal/bin:$PATH
  - which cabal
  - cabal --version
  - travis_retry cabal update
  - |
    if [ "$SUBMIT_COVERAGE" = "TRUE" ]; then
      travis_retry cabal install hpc-coveralls
      ls ltrh ~/.cabal/bin
      date
      which hpc-coveralls
      which run-cabal-test
    fi
  - cabal install --dependencies-only --enable-tests
  - ghc-pkg list

script:
  - |
    if [ "$SUBMIT_COVERAGE" = "TRUE" ]; then
      cabal configure --enable-tests -v2 --enable-library-coverage
    else
      cabal configure --enable-tests -v2
    fi
  - cabal build
  - |
    if [ "$SUBMIT_COVERAGE" = "TRUE" ]; then
      run-cabal-test --show-details=always
    else
      cabal test --show-details=always
    fi
  - cabal check
  - cabal sdist
  - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}') ;
    cd dist/;
    if [ -f "$SRC_TGZ" ]; then
       cabal install --force-reinstalls "$SRC_TGZ";
    else
       echo "expected '$SRC_TGZ' not found";
       exit 1;
    fi;
    cd -

after_script:
  - |
    if [ "$SUBMIT_COVERAGE" = "TRUE" ]; then
      hpc-coveralls --coverage-mode=StrictlyFullLines --exclude-dir=tests tests examples
    fi

